import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import {
  getAssessmentResult,
  AssessmentResult,
  ExerciseSuggestion,
} from "@/services/questionnaire.service";
import Spinner from "@/components/Spinner";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { getExerciseById } from "@/services/exercise.service";
import { Exercise } from "@/interfaces/exercise";
import { AlertCircle } from "lucide-react";

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { createAssessmentAnalysis } from "@/services/assessment.service";
import { Button } from "@/components/ui/button";

const QuestionnaireResult = () => {
  const { id } = useParams<{ id: string }>();
  const [result, setResult] = useState<AssessmentResult | null>(null);

  const [suggestExercise, setSuggestExercise] = useState<Exercise[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  const fetchAssessmentResult = async (id: string) => {
    try {
      const result = await getAssessmentResult(id);
      setResult(result);

      if (result.exerciseSuggestions.length > 0) {
        await fetchSuggestedExercises(result.exerciseSuggestions);
      }
    } catch (e) {
      console.error("Failed to fetch assessment result", e);
    }
  };

  const handleGenerateAnalysis = async () => {
    if (!id) return;
    setIsLoading(true);
    try {
      await createAssessmentAnalysis(id);
      await fetchAssessmentResult(id); // Refresh the page
    } catch (e) {
      console.error('Failed to generate assessment analysis', e);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchSuggestedExercises = async (
    exerciseSuggestions: ExerciseSuggestion[]
  ) => {
    // Fetch suggested exercises
    try {
      const exercisePromises = exerciseSuggestions.flatMap((suggestion) =>
        suggestion.suggestion.map((s) => getExerciseById(s.exerciseId))
      );
      const exerciseResults = await Promise.all(exercisePromises);
      setSuggestExercise(exerciseResults);
    } catch (e) {
      console.error("Failed to fetch suggested exercises", e);
    }
  };

  useEffect(() => {
    if (id) {
      fetchAssessmentResult(id);
    }
  }, [id]);

  return (
    <Card className="p-6 bg-slate-100">
      <h1 className="text-2xl font-bold mb-6">Questionnaire Result</h1>
      {result ? (
        <div className="space-y-6">
          <div className="space-y-2">
            <p>
              <strong>Name:</strong> {result.questionnaireName}
            </p>
            <p>
              <strong>Type:</strong> {result.questionnaireType}
            </p>
            <p>
              <strong>Index:</strong> {result.questionnaireIndex}
            </p>
            <p>
              <strong>Status:</strong>{" "}
              <Badge variant="default">{result.questionnaireStatus}</Badge>
            </p>
            <p>
              <strong>Total Score:</strong> {result.totalScore}
            </p>
          </div>
          <Separator />
          <h2 className="text-xl font-bold">Result Analysis</h2>
          {result.exerciseSuggestions.length > 0 ? (
            <>
            

            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>AI-Generated Content</AlertTitle>
              <AlertDescription>
                This information has been generated by an AI assistant. While
                we strive to ensure accuracy, please verify any critical
                details.
              </AlertDescription>
            </Alert>
            {result.exerciseSuggestions.map((exerciseSuggestion) => (
              <div key={exerciseSuggestion.id} className="mb-4">
                <span className="text-md font-semibold">
                  {exerciseSuggestion.analysis}
                </span>
              </div>
            ))}

            <ul className="grid grid-cols-3 gap-5">
              {suggestExercise.map((s) => (
                <Card key={s.id} className="w-64 h-86 flex flex-col">
                  <CardHeader className="flex-1 overflow-hidden">
                    <CardTitle>{s.title}</CardTitle>
                    <CardDescription>{s.description}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <img
                      src={s.thumbnailUrl}
                      alt="exercise thumbnail"
                    />
                  </CardContent>
                </Card>
              ))}
            </ul>
          </>
          ) : result.questionnaireStatus === "Completed" ? (
            <div className="text-center py-4">
              <p className="text-lg font-semibold">AI Analysis is ready</p>
              <p className="text-sm text-gray-500 mt-2">Click generate to see the assessment analysis and recommended exercise.</p>
              <Button onClick={handleGenerateAnalysis} className="mt-4" disabled={isLoading}>
                {isLoading ? <Spinner /> : "Generate"}
              </Button>
            </div>
          ) : (
            <div className="text-center py-4">
              <p className="text-lg font-semibold">Assessment not completed</p>
              <p className="text-sm text-gray-500 mt-2">Please wait until the patient completes the assessment.</p>
            </div>
          )}
          <Separator />
          <Accordion type="single" collapsible className="w-full">
            <h2 className="text-xl font-bold">Assessment Score</h2>
            {result.sectionScores.map((section, sectionIndex) => (
              <AccordionItem key={sectionIndex} value={`item-${sectionIndex}`}>
                <AccordionTrigger>
                  <div className="flex flex-col items-start">
                    {section.sectionName}
                    <p className="text-sm text-gray-600">
                      <strong>Score:</strong> {section.sectionScore} /{" "}
                      {section.sectionTotalScore}
                    </p>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="mt-4 space-y-3">
                    {section.questions.map((question, questionIndex) => (
                      <div
                        key={questionIndex}
                        className="p-3 bg-white rounded-md shadow-sm border border-gray-200"
                      >
                        <p className="text-sm">
                          <strong>Question:</strong> {question.questionTitle}
                        </p>
                        <p className="text-sm">
                          <strong>Response:</strong>{" "}
                          {question.response
                            ? question.response.scaleValue
                            : "No response"}
                        </p>
                      </div>
                    ))}
                  </div>
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
          <Separator />
        </div>
      ) : (
        <div className="flex justify-center items-center h-full">
          <Spinner />
        </div>
      )}
    </Card>
  );
};

export default QuestionnaireResult;
